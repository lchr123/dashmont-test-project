import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["allowClear", "bordered", "prefix", "suffix", "addonAfter", "addonBefore", "id"];
import { resolveDirective as _resolveDirective, createVNode as _createVNode, Fragment as _Fragment } from "vue";
import { onBeforeUpdate, computed, onBeforeUnmount, onMounted, ref, defineComponent } from 'vue';
import classNames from '../_util/classNames';
import { FormItemInputContext, NoFormStatus, useInjectFormItemContext } from '../form/FormItemContext';
import useConfigInject from '../_util/hooks/useConfigInject';
import { getMergedStatus, getStatusClassNames } from '../_util/statusUtils';
import { hasPrefixSuffix } from '../vc-input/utils/commonUtils';
import VcInput from '../vc-input/Input';
import inputProps from './inputProps';
import omit from '../_util/omit';
import CloseCircleFilled from "@ant-design/icons-vue/es/icons/CloseCircleFilled";
export default defineComponent({
  compatConfig: {
    MODE: 3
  },
  name: 'AInput',
  inheritAttrs: false,
  props: inputProps(),
  setup: function setup(props, _ref) {
    var slots = _ref.slots,
      attrs = _ref.attrs,
      expose = _ref.expose,
      emit = _ref.emit;
    var inputRef = ref();
    var formItemContext = useInjectFormItemContext();
    var formItemInputContext = FormItemInputContext.useInject();
    var mergedStatus = computed(function () {
      return getMergedStatus(formItemInputContext.status, props.status);
    });
    var _useConfigInject = useConfigInject('input', props),
      direction = _useConfigInject.direction,
      prefixCls = _useConfigInject.prefixCls,
      size = _useConfigInject.size,
      autocomplete = _useConfigInject.autocomplete;
    var focus = function focus(option) {
      var _inputRef$value;
      (_inputRef$value = inputRef.value) === null || _inputRef$value === void 0 ? void 0 : _inputRef$value.focus(option);
    };
    var blur = function blur() {
      var _inputRef$value2;
      (_inputRef$value2 = inputRef.value) === null || _inputRef$value2 === void 0 ? void 0 : _inputRef$value2.blur();
    };
    var setSelectionRange = function setSelectionRange(start, end, direction) {
      var _inputRef$value3;
      (_inputRef$value3 = inputRef.value) === null || _inputRef$value3 === void 0 ? void 0 : _inputRef$value3.setSelectionRange(start, end, direction);
    };
    var select = function select() {
      var _inputRef$value4;
      (_inputRef$value4 = inputRef.value) === null || _inputRef$value4 === void 0 ? void 0 : _inputRef$value4.select();
    };
    expose({
      focus: focus,
      blur: blur,
      input: inputRef,
      setSelectionRange: setSelectionRange,
      select: select
    });
    // ===================== Remove Password value =====================
    var removePasswordTimeoutRef = ref([]);
    var removePasswordTimeout = function removePasswordTimeout() {
      removePasswordTimeoutRef.value.push(setTimeout(function () {
        var _inputRef$value5, _inputRef$value6, _inputRef$value7;
        if ((_inputRef$value5 = inputRef.value) !== null && _inputRef$value5 !== void 0 && _inputRef$value5.input && ((_inputRef$value6 = inputRef.value) === null || _inputRef$value6 === void 0 ? void 0 : _inputRef$value6.input.getAttribute('type')) === 'password' && (_inputRef$value7 = inputRef.value) !== null && _inputRef$value7 !== void 0 && _inputRef$value7.input.hasAttribute('value')) {
          var _inputRef$value8;
          (_inputRef$value8 = inputRef.value) === null || _inputRef$value8 === void 0 ? void 0 : _inputRef$value8.input.removeAttribute('value');
        }
      }));
    };
    onMounted(function () {
      removePasswordTimeout();
    });
    onBeforeUpdate(function () {
      removePasswordTimeoutRef.value.forEach(function (item) {
        return clearTimeout(item);
      });
    });
    onBeforeUnmount(function () {
      removePasswordTimeoutRef.value.forEach(function (item) {
        return clearTimeout(item);
      });
    });
    var handleBlur = function handleBlur(e) {
      removePasswordTimeout();
      emit('blur', e);
      formItemContext.onFieldBlur();
    };
    var handleFocus = function handleFocus(e) {
      removePasswordTimeout();
      emit('focus', e);
    };
    var triggerChange = function triggerChange(e) {
      emit('update:value', e.target.value);
      emit('change', e);
      emit('input', e);
      formItemContext.onFieldChange();
    };
    return function () {
      var _slots$prefix, _slots$suffix, _slots$addonAfter, _slots$addonBefore, _formItemContext$id, _classNames, _classNames2, _classNames4;
      var hasFeedback = formItemInputContext.hasFeedback,
        feedbackIcon = formItemInputContext.feedbackIcon;
      var allowClear = props.allowClear,
        _props$bordered = props.bordered,
        bordered = _props$bordered === void 0 ? true : _props$bordered,
        _props$prefix = props.prefix,
        prefix = _props$prefix === void 0 ? (_slots$prefix = slots.prefix) === null || _slots$prefix === void 0 ? void 0 : _slots$prefix.call(slots) : _props$prefix,
        _props$suffix = props.suffix,
        suffix = _props$suffix === void 0 ? (_slots$suffix = slots.suffix) === null || _slots$suffix === void 0 ? void 0 : _slots$suffix.call(slots) : _props$suffix,
        _props$addonAfter = props.addonAfter,
        addonAfter = _props$addonAfter === void 0 ? (_slots$addonAfter = slots.addonAfter) === null || _slots$addonAfter === void 0 ? void 0 : _slots$addonAfter.call(slots) : _props$addonAfter,
        _props$addonBefore = props.addonBefore,
        addonBefore = _props$addonBefore === void 0 ? (_slots$addonBefore = slots.addonBefore) === null || _slots$addonBefore === void 0 ? void 0 : _slots$addonBefore.call(slots) : _props$addonBefore,
        _props$id = props.id,
        id = _props$id === void 0 ? (_formItemContext$id = formItemContext.id) === null || _formItemContext$id === void 0 ? void 0 : _formItemContext$id.value : _props$id,
        rest = _objectWithoutProperties(props, _excluded);
      var suffixNode = (hasFeedback || suffix) && _createVNode(_Fragment, null, [suffix, hasFeedback && feedbackIcon]);
      var prefixClsValue = prefixCls.value;
      var inputHasPrefixSuffix = hasPrefixSuffix({
        prefix: prefix,
        suffix: suffix
      }) || !!hasFeedback;
      var clearIcon = slots.clearIcon || function () {
        return _createVNode(CloseCircleFilled, null, null);
      };
      return _createVNode(VcInput, _objectSpread(_objectSpread(_objectSpread({}, attrs), omit(rest, ['onUpdate:value', 'onChange', 'onInput'])), {}, {
        "onChange": triggerChange,
        "id": id,
        "ref": inputRef,
        "prefixCls": prefixClsValue,
        "autocomplete": autocomplete.value,
        "onBlur": handleBlur,
        "onFocus": handleFocus,
        "suffix": suffixNode,
        "allowClear": allowClear,
        "addonAfter": addonAfter && _createVNode(NoFormStatus, null, {
          default: function _default() {
            return [addonAfter];
          }
        }),
        "addonBefore": addonBefore && _createVNode(NoFormStatus, null, {
          default: function _default() {
            return [addonBefore];
          }
        }),
        "inputClassName": classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixClsValue, "-sm"), size.value === 'small'), _defineProperty(_classNames, "".concat(prefixClsValue, "-lg"), size.value === 'large'), _defineProperty(_classNames, "".concat(prefixClsValue, "-rtl"), direction.value === 'rtl'), _defineProperty(_classNames, "".concat(prefixClsValue, "-borderless"), !bordered), _classNames), !inputHasPrefixSuffix && getStatusClassNames(prefixClsValue, mergedStatus.value)),
        "affixWrapperClassName": classNames((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixClsValue, "-affix-wrapper-sm"), size.value === 'small'), _defineProperty(_classNames2, "".concat(prefixClsValue, "-affix-wrapper-lg"), size.value === 'large'), _defineProperty(_classNames2, "".concat(prefixClsValue, "-affix-wrapper-rtl"), direction.value === 'rtl'), _defineProperty(_classNames2, "".concat(prefixClsValue, "-affix-wrapper-borderless"), !bordered), _classNames2), getStatusClassNames("".concat(prefixClsValue, "-affix-wrapper"), mergedStatus.value, hasFeedback)),
        "wrapperClassName": classNames(_defineProperty({}, "".concat(prefixClsValue, "-group-rtl"), direction.value === 'rtl')),
        "groupClassName": classNames((_classNames4 = {}, _defineProperty(_classNames4, "".concat(prefixClsValue, "-group-wrapper-sm"), size.value === 'small'), _defineProperty(_classNames4, "".concat(prefixClsValue, "-group-wrapper-lg"), size.value === 'large'), _defineProperty(_classNames4, "".concat(prefixClsValue, "-group-wrapper-rtl"), direction.value === 'rtl'), _classNames4), getStatusClassNames("".concat(prefixClsValue, "-group-wrapper"), mergedStatus.value, hasFeedback))
      }), _objectSpread(_objectSpread({}, slots), {}, {
        clearIcon: clearIcon
      }));
    };
  }
});